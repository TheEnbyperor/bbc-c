ca65 V2.17 - Git c92a3c5bd
Main file   : main.s
Current file: main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git c92a3c5bd
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git c92a3c5bd"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_reverse
000000r 1               	.export		_itoa
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L002C:
000000r 1  48 65 6C 6C  	.byte	$48,$65,$6C,$6C,$6F,$2C,$20,$77,$6F,$72,$6C,$64,$21,$0A,$00
000004r 1  6F 2C 20 77  
000008r 1  6F 72 6C 64  
00000Fr 1               
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               ; void __near__ reverse (unsigned char *, int)
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               
00000Fr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_reverse: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  20 rr rr     	jsr     decsp5
000006r 1  A2 00        	ldx     #$00
000008r 1  A9 00        	lda     #$00
00000Ar 1  A0 03        	ldy     #$03
00000Cr 1  20 rr rr     	jsr     staxysp
00000Fr 1  A0 06        	ldy     #$06
000011r 1  20 rr rr     	jsr     ldaxysp
000014r 1  20 rr rr     	jsr     decax1
000017r 1  A0 01        	ldy     #$01
000019r 1  20 rr rr     	jsr     staxysp
00001Cr 1  A0 04        L0002:	ldy     #$04
00001Er 1  20 rr rr     	jsr     ldaxysp
000021r 1  20 rr rr     	jsr     pushax
000024r 1  A0 04        	ldy     #$04
000026r 1  20 rr rr     	jsr     ldaxysp
000029r 1  20 rr rr     	jsr     tosltax
00002Cr 1  F0 03 4C rr  	jne     L0005
000030r 1  rr           
000031r 1  4C rr rr     	jmp     L0003
000034r 1  A0 08        L0005:	ldy     #$08
000036r 1  20 rr rr     	jsr     ldaxysp
000039r 1  20 rr rr     	jsr     pushax
00003Cr 1  A0 06        	ldy     #$06
00003Er 1  20 rr rr     	jsr     ldaxysp
000041r 1  20 rr rr     	jsr     tosaddax
000044r 1  A0 00        	ldy     #$00
000046r 1  20 rr rr     	jsr     ldauidx
000049r 1  A0 00        	ldy     #$00
00004Br 1  91 rr        	sta     (sp),y
00004Dr 1  A0 08        	ldy     #$08
00004Fr 1  20 rr rr     	jsr     ldaxysp
000052r 1  20 rr rr     	jsr     pushax
000055r 1  A0 06        	ldy     #$06
000057r 1  20 rr rr     	jsr     ldaxysp
00005Ar 1  20 rr rr     	jsr     tosaddax
00005Dr 1  20 rr rr     	jsr     pushax
000060r 1  A0 0A        	ldy     #$0A
000062r 1  20 rr rr     	jsr     ldaxysp
000065r 1  20 rr rr     	jsr     pushax
000068r 1  A0 06        	ldy     #$06
00006Ar 1  20 rr rr     	jsr     ldaxysp
00006Dr 1  20 rr rr     	jsr     tosaddax
000070r 1  A0 00        	ldy     #$00
000072r 1  20 rr rr     	jsr     ldauidx
000075r 1  A0 00        	ldy     #$00
000077r 1  20 rr rr     	jsr     staspidx
00007Ar 1  A0 08        	ldy     #$08
00007Cr 1  20 rr rr     	jsr     ldaxysp
00007Fr 1  20 rr rr     	jsr     pushax
000082r 1  A0 04        	ldy     #$04
000084r 1  20 rr rr     	jsr     ldaxysp
000087r 1  20 rr rr     	jsr     tosaddax
00008Ar 1  20 rr rr     	jsr     pushax
00008Dr 1  A0 02        	ldy     #$02
00008Fr 1  A2 00        	ldx     #$00
000091r 1  B1 rr        	lda     (sp),y
000093r 1  A0 00        	ldy     #$00
000095r 1  20 rr rr     	jsr     staspidx
000098r 1  A0 04        	ldy     #$04
00009Ar 1  20 rr rr     	jsr     ldaxysp
00009Dr 1  85 rr        	sta     regsave
00009Fr 1  86 rr        	stx     regsave+1
0000A1r 1  20 rr rr     	jsr     incax1
0000A4r 1  A0 03        	ldy     #$03
0000A6r 1  20 rr rr     	jsr     staxysp
0000A9r 1  A5 rr        	lda     regsave
0000ABr 1  A6 rr        	ldx     regsave+1
0000ADr 1  A0 02        	ldy     #$02
0000AFr 1  20 rr rr     	jsr     ldaxysp
0000B2r 1  85 rr        	sta     regsave
0000B4r 1  86 rr        	stx     regsave+1
0000B6r 1  20 rr rr     	jsr     decax1
0000B9r 1  A0 01        	ldy     #$01
0000BBr 1  20 rr rr     	jsr     staxysp
0000BEr 1  A5 rr        	lda     regsave
0000C0r 1  A6 rr        	ldx     regsave+1
0000C2r 1  4C rr rr     	jmp     L0002
0000C5r 1  A0 09        L0003:	ldy     #$09
0000C7r 1  20 rr rr     	jsr     addysp
0000CAr 1  60           	rts
0000CBr 1               
0000CBr 1               .endproc
0000CBr 1               
0000CBr 1               ; ---------------------------------------------------------------
0000CBr 1               ; void __near__ itoa (int, unsigned char *)
0000CBr 1               ; ---------------------------------------------------------------
0000CBr 1               
0000CBr 1               .segment	"CODE"
0000CBr 1               
0000CBr 1               .proc	_itoa: near
0000CBr 1               
0000CBr 1               .segment	"CODE"
0000CBr 1               
0000CBr 1  20 rr rr     	jsr     pushax
0000CEr 1  20 rr rr     	jsr     decsp2
0000D1r 1  A2 00        	ldx     #$00
0000D3r 1  A9 00        	lda     #$00
0000D5r 1  A0 00        	ldy     #$00
0000D7r 1  20 rr rr     	jsr     staxysp
0000DAr 1  A0 03        L001A:	ldy     #$03
0000DCr 1  20 rr rr     	jsr     ldaxysp
0000DFr 1  20 rr rr     	jsr     pushax
0000E2r 1  A0 03        	ldy     #$03
0000E4r 1  20 rr rr     	jsr     ldaxysp
0000E7r 1  85 rr        	sta     regsave
0000E9r 1  86 rr        	stx     regsave+1
0000EBr 1  20 rr rr     	jsr     incax1
0000EEr 1  A0 02        	ldy     #$02
0000F0r 1  20 rr rr     	jsr     staxysp
0000F3r 1  A5 rr        	lda     regsave
0000F5r 1  A6 rr        	ldx     regsave+1
0000F7r 1  20 rr rr     	jsr     tosaddax
0000FAr 1  20 rr rr     	jsr     pushax
0000FDr 1  A0 07        	ldy     #$07
0000FFr 1  20 rr rr     	jsr     ldaxysp
000102r 1  20 rr rr     	jsr     pushax
000105r 1  A2 00        	ldx     #$00
000107r 1  A9 0A        	lda     #$0A
000109r 1  20 rr rr     	jsr     tosmodax
00010Cr 1  A0 30        	ldy     #$30
00010Er 1  20 rr rr     	jsr     incaxy
000111r 1  A2 00        	ldx     #$00
000113r 1  A0 00        	ldy     #$00
000115r 1  20 rr rr     	jsr     staspidx
000118r 1  A0 05        	ldy     #$05
00011Ar 1  20 rr rr     	jsr     ldaxysp
00011Dr 1  20 rr rr     	jsr     pushax
000120r 1  A2 00        	ldx     #$00
000122r 1  A9 0A        	lda     #$0A
000124r 1  20 rr rr     	jsr     tosdivax
000127r 1  A0 04        	ldy     #$04
000129r 1  20 rr rr     	jsr     staxysp
00012Cr 1  C9 01        	cmp     #$01
00012Er 1  8A           	txa
00012Fr 1  E9 00        	sbc     #$00
000131r 1  70 02        	bvs     L0023
000133r 1  49 80        	eor     #$80
000135r 1  0A           L0023:	asl     a
000136r 1  A9 00        	lda     #$00
000138r 1  A2 00        	ldx     #$00
00013Ar 1  2A           	rol     a
00013Br 1  D0 9D        	jne     L001A
00013Dr 1  A0 03        	ldy     #$03
00013Fr 1  20 rr rr     	jsr     ldaxysp
000142r 1  20 rr rr     	jsr     pushax
000145r 1  A0 03        	ldy     #$03
000147r 1  20 rr rr     	jsr     ldaxysp
00014Ar 1  20 rr rr     	jsr     tosaddax
00014Dr 1  20 rr rr     	jsr     pushax
000150r 1  A2 00        	ldx     #$00
000152r 1  A9 00        	lda     #$00
000154r 1  A0 00        	ldy     #$00
000156r 1  20 rr rr     	jsr     staspidx
000159r 1  A0 03        	ldy     #$03
00015Br 1  20 rr rr     	jsr     ldaxysp
00015Er 1  20 rr rr     	jsr     pushax
000161r 1  A0 03        	ldy     #$03
000163r 1  20 rr rr     	jsr     ldaxysp
000166r 1  20 rr rr     	jsr     _reverse
000169r 1  20 rr rr     	jsr     incsp6
00016Cr 1  60           	rts
00016Dr 1               
00016Dr 1               .endproc
00016Dr 1               
00016Dr 1               ; ---------------------------------------------------------------
00016Dr 1               ; int __near__ main (void)
00016Dr 1               ; ---------------------------------------------------------------
00016Dr 1               
00016Dr 1               .segment	"CODE"
00016Dr 1               
00016Dr 1               .proc	_main: near
00016Dr 1               
00016Dr 1               .segment	"CODE"
00016Dr 1               
00016Dr 1  A9 rr        	lda     #<(L002C)
00016Fr 1  A2 rr        	ldx     #>(L002C)
000171r 1  20 rr rr     	jsr     pushax
000174r 1  A0 02        	ldy     #$02
000176r 1  20 rr rr     	jsr     _printf
000179r 1  A2 00        	ldx     #$00
00017Br 1  A9 1E        	lda     #$1E
00017Dr 1  4C rr rr     	jmp     L002A
000180r 1  60           L002A:	rts
000181r 1               
000181r 1               .endproc
000181r 1               
000181r 1               
